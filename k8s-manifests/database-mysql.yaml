apiVersion: v1
kind: Namespace
metadata:
  name: database
  labels:
    name: database
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init-script
  namespace: database
data:
  init-mysql.sql: |
    -- MySQL initialization script
    
    -- Create sample database if it doesn't exist
    CREATE DATABASE IF NOT EXISTS sampledb;
    
    -- Create a sample table for testing
    USE sampledb;
    
    CREATE TABLE IF NOT EXISTS sample_data (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        email VARCHAR(255) UNIQUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    );
    
    -- Insert some sample data
    INSERT IGNORE INTO sample_data (name, email) VALUES 
        ('Admin User', 'admin@example.com'),
        ('Test User', 'test@example.com'),
        ('Developer', 'dev@example.com');
    
    -- Create an index for performance
    CREATE INDEX IF NOT EXISTS idx_email ON sample_data(email);
    
    -- Grant privileges to the MySQL user
    GRANT ALL PRIVILEGES ON sampledb.* TO 'dbuser'@'%';
    FLUSH PRIVILEGES;
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: database
type: Opaque
data:
  # These will be replaced with generated credentials during deployment
  mysql-root-password: <base64-encoded-root-password>
  mysql-password: <base64-encoded-user-password>
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: local-path
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
        - containerPort: 3306
          name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          value: "sampledb"
        - name: MYSQL_USER
          value: "dbuser"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
        - name: mysql-init
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - mysqladmin
            - ping
            - -h
            - localhost
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - mysqladmin
            - ping
            - -h
            - localhost
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
      - name: mysql-init
        configMap:
          name: mysql-init-script
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: database
spec:
  selector:
    app: mysql
  ports:
  - name: mysql
    port: 3306
    targetPort: 3306
  type: ClusterIP
---
# TCP Ingress for MySQL (external access)
apiVersion: traefik.io/v1alpha1
kind: IngressRouteTCP
metadata:
  name: mysql-tcp-ingress
  namespace: traefik-system
spec:
  entryPoints:
    - mysql
  routes:
  - match: HostSNI(`*`)
    services:
    - name: mysql-service
      namespace: database
      port: 3306
