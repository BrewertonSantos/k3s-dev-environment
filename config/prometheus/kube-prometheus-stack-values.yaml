# kube-prometheus-stack configuration for K3s development environment
# This will replace the existing simple Prometheus with a full monitoring stack

# Global settings
nameOverride: "kube-prometheus"
fullnameOverride: "kube-prometheus"

# Default rules for alerting
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: false  # K3s doesn't expose etcd metrics by default
    configReloaders: true
    general: true
    k8s: true
    kubeApiserverAvailability: true
    kubeApiserverBurnrate: true
    kubeApiserverHistogram: true
    kubeApiserverSlos: true
    kubelet: true
    kubeProxy: false  # K3s uses different proxy
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: false  # K3s scheduler metrics might not be exposed
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true

# AlertManager configuration
alertmanager:
  enabled: true
  ingress:
    enabled: true
    ingressClassName: traefik
    hosts:
      - alertmanager.localhost
    paths:
      - /
  config:
    global:
      smtp_smarthost: 'localhost:587'
      smtp_from: 'alertmanager@k3s.local'
    route:
      group_by: ['alertname']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'default-webhook'
    receivers:
      - name: 'default-webhook'
        webhook_configs:
          - url: 'http://127.0.0.1:5001/'
            send_resolved: true

# Grafana configuration - integrate with existing Grafana
grafana:
  enabled: false  # We'll use the existing Grafana deployment
  
# Disable the bundled Grafana since we have our own
# But keep the service monitor to scrape our Grafana
grafana-service-monitor:
  enabled: true

# Kube State Metrics
kube-state-metrics:
  enabled: true

# Node Exporter
nodeExporter:
  enabled: true

# Prometheus configuration
prometheus:
  enabled: true
  
  # Service configuration
  service:
    type: ClusterIP
    port: 9090
    
  # Ingress configuration
  ingress:
    enabled: true
    ingressClassName: traefik
    hosts:
      - prometheus-stack.localhost
    paths:
      - /
      
  # Prometheus instance configuration
  prometheusSpec:
    # Resources
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"
        
    # Storage
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 10Gi
              
    # Data retention
    retention: 15d
    retentionSize: 8GB
    
    # Scrape configuration
    scrapeInterval: 30s
    evaluationInterval: 30s
    
    # Service monitor selector
    serviceMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelector: {}
    serviceMonitorNamespaceSelector: {}
    
    # Pod monitor selector  
    podMonitorSelectorNilUsesHelmValues: false
    podMonitorSelector: {}
    podMonitorNamespaceSelector: {}
    
    # Rule selector
    ruleSelectorNilUsesHelmValues: false
    ruleSelector: {}
    ruleNamespaceSelector: {}
    
    # Additional scrape configs for database monitoring
    additionalScrapeConfigs:
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
            
      - job_name: 'kubernetes-services'
        kubernetes_sd_configs:
          - role: service
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
            action: replace
            target_label: __scheme__
            regex: (https?)
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            target_label: __address__
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_service_name

# Prometheus Operator configuration
prometheusOperator:
  enabled: true
  
  # Resources
  resources:
    limits:
      cpu: 200m
      memory: 200Mi
    requests:
      cpu: 100m
      memory: 100Mi
      
  # Create default service monitors
  serviceMonitor:
    selfMonitor: true

# Clean up conflicting resources
cleanupOnUninstall: true
